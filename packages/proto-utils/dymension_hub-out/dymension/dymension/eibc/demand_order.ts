/* eslint-disable */
import Long from "long";
import _m0 from "protobufjs/minimal";
import { Coin } from "../../cosmos/base/v1beta1/coin";
import { Status, statusFromJSON, statusToJSON } from "../common/status";

export const protobufPackage = "dymensionxyz.dymension.eibc";

export interface DemandOrder {
  /**
   * id is a hash of the form generated by GetRollappPacketKey,
   * e.g status/rollappid/packetProofHeight/packetDestinationChannel-PacketSequence which gurantees uniqueness
   */
  id: string;
  /**
   * tracking_packet_key is the key of the packet that is being tracked.
   * This key can change depends on the packet status.
   */
  trackingPacketKey: string;
  price: Coin[];
  fee: Coin[];
  recipient: string;
  isFullfilled: boolean;
  trackingPacketStatus: Status;
}

function createBaseDemandOrder(): DemandOrder {
  return {
    id: "",
    trackingPacketKey: "",
    price: [],
    fee: [],
    recipient: "",
    isFullfilled: false,
    trackingPacketStatus: 0,
  };
}

export const DemandOrder = {
  encode(message: DemandOrder, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.trackingPacketKey !== "") {
      writer.uint32(18).string(message.trackingPacketKey);
    }
    for (const v of message.price) {
      Coin.encode(v!, writer.uint32(26).fork()).ldelim();
    }
    for (const v of message.fee) {
      Coin.encode(v!, writer.uint32(34).fork()).ldelim();
    }
    if (message.recipient !== "") {
      writer.uint32(42).string(message.recipient);
    }
    if (message.isFullfilled === true) {
      writer.uint32(48).bool(message.isFullfilled);
    }
    if (message.trackingPacketStatus !== 0) {
      writer.uint32(64).int32(message.trackingPacketStatus);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DemandOrder {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDemandOrder();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.trackingPacketKey = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.price.push(Coin.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.fee.push(Coin.decode(reader, reader.uint32()));
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.recipient = reader.string();
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.isFullfilled = reader.bool();
          continue;
        case 8:
          if (tag !== 64) {
            break;
          }

          message.trackingPacketStatus = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DemandOrder {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      trackingPacketKey: isSet(object.trackingPacketKey) ? globalThis.String(object.trackingPacketKey) : "",
      price: globalThis.Array.isArray(object?.price) ? object.price.map((e: any) => Coin.fromJSON(e)) : [],
      fee: globalThis.Array.isArray(object?.fee) ? object.fee.map((e: any) => Coin.fromJSON(e)) : [],
      recipient: isSet(object.recipient) ? globalThis.String(object.recipient) : "",
      isFullfilled: isSet(object.isFullfilled) ? globalThis.Boolean(object.isFullfilled) : false,
      trackingPacketStatus: isSet(object.trackingPacketStatus) ? statusFromJSON(object.trackingPacketStatus) : 0,
    };
  },

  toJSON(message: DemandOrder): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.trackingPacketKey !== "") {
      obj.trackingPacketKey = message.trackingPacketKey;
    }
    if (message.price?.length) {
      obj.price = message.price.map((e) => Coin.toJSON(e));
    }
    if (message.fee?.length) {
      obj.fee = message.fee.map((e) => Coin.toJSON(e));
    }
    if (message.recipient !== "") {
      obj.recipient = message.recipient;
    }
    if (message.isFullfilled === true) {
      obj.isFullfilled = message.isFullfilled;
    }
    if (message.trackingPacketStatus !== 0) {
      obj.trackingPacketStatus = statusToJSON(message.trackingPacketStatus);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DemandOrder>, I>>(base?: I): DemandOrder {
    return DemandOrder.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DemandOrder>, I>>(object: I): DemandOrder {
    const message = createBaseDemandOrder();
    message.id = object.id ?? "";
    message.trackingPacketKey = object.trackingPacketKey ?? "";
    message.price = object.price?.map((e) => Coin.fromPartial(e)) || [];
    message.fee = object.fee?.map((e) => Coin.fromPartial(e)) || [];
    message.recipient = object.recipient ?? "";
    message.isFullfilled = object.isFullfilled ?? false;
    message.trackingPacketStatus = object.trackingPacketStatus ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
